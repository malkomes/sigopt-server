/**
 * Copyright Â© 2022 Intel Corporation
 *
 * SPDX-License-Identifier: Apache License 2.0
 */

import _ from "underscore";

import SigoptError from "../error/base";
import {isJsObject} from "../utils";

export class HttpError extends SigoptError {
  constructor(options = {}) {
    super(options.message || "Unknown error");
    this.status = options.status;
    this.showNeedsLogin = options.showNeedsLogin || false;
    this.tokenStatus = options.tokenStatus || null;
  }

  isClientError() {
    return this.status && Math.floor(this.status / 100) === 4;
  }
}

// Used for errors generated by requests to external services (such as the API)
// Typically these errors are treated as unexpected and logged
export class RequestError extends HttpError {}

export class BadParamError extends HttpError {
  constructor(message) {
    super({status: 400, message: message || "Bad Request"});
  }
}

export class UnauthorizedError extends HttpError {
  constructor(message) {
    super({status: 401, message: message || "Unauthorized"});
  }
}

export class NotFoundError extends HttpError {
  constructor(options, showNeedsLogin = false) {
    let message, path;
    if (isJsObject(options)) {
      path = options.path;
      message = options.message;
    } else {
      message = options;
    }

    if (path && !message) {
      message = `Page Not Found: ${path}`;
    } else if (!message) {
      message = "Page Not Found";
    }

    super({status: 404, message: message, showNeedsLogin: showNeedsLogin});
  }
}

export class PromptForLoginError extends NotFoundError {
  constructor() {
    super("You must log in to see this page", true);
  }
}

export class SicknessError extends HttpError {
  constructor() {
    super({status: 500, message: "This is a test error, no cause for alarm."});
  }
}

export class TooBusyError extends HttpError {
  constructor() {
    super({status: 503, message: "Server is too busy to process new requests"});
  }
}

_.each(
  [
    [HttpError, Error],
    [UnauthorizedError, Error],
    [UnauthorizedError, HttpError],
  ],
  ([BaseCls, ParentCls]) => {
    if (!(new BaseCls({}) instanceof ParentCls)) {
      throw new Error(
        `${BaseCls} does not extend ${ParentCls}, ensure babel-plugin-transform-builtin-extend is configured.`,
      );
    }
  },
);
